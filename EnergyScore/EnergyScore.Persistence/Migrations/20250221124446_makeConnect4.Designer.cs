// <auto-generated />
using System;
using EnergyScore.Persistence.DBConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnergyScore.Persistence.Migrations
{
    [DbContext(typeof(DbConnect))]
    [Migration("20250221124446_makeConnect4")]
    partial class makeConnect4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnergyScore.Domain.Entityies.AboutModels.About", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AverageCeilingHeight")
                        .HasColumnType("double precision");

                    b.Property<int>("AzimuthOfFrontOfHome")
                        .HasColumnType("integer");

                    b.Property<double>("ConditionedBuildingVolume")
                        .HasColumnType("double precision");

                    b.Property<double>("ConditionedFloorArea")
                        .HasColumnType("double precision");

                    b.Property<string>("ManufacturedHomeSections")
                        .HasColumnType("text");

                    b.Property<int>("NumberofBedrooms")
                        .HasColumnType("integer");

                    b.Property<double>("NumberofConditionedFloorsAboveGrade")
                        .HasColumnType("double precision");

                    b.Property<string>("OrientationOfFrontOfHome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResidentialFacilityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.AboutModels.AirInfiltrationMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uuid");

                    b.Property<double>("AirLeakage")
                        .HasColumnType("double precision");

                    b.Property<double>("HousePressure")
                        .HasColumnType("double precision");

                    b.Property<string>("LeakinessDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitofMeasure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("AirInfiltrationMeasurements");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.AddressModels.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Zipcode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Addresss");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.AddressModels.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AboutId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ZoneFloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ZoneRoofId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ZoneWallId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ZoneFloorId");

                    b.HasIndex("ZoneRoofId");

                    b.HasIndex("ZoneWallId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.CommonModels.Insulation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AssemblyEffectiveRValue")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("FoundationWallId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FrameFloorId")
                        .HasColumnType("uuid");

                    b.Property<string>("InstallationType")
                        .HasColumnType("text");

                    b.Property<string>("InsulationMaterial")
                        .HasColumnType("text");

                    b.Property<double>("NominalRValue")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("RoofId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FoundationWallId");

                    b.HasIndex("FrameFloorId");

                    b.HasIndex("RoofId");

                    b.ToTable("Insulations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.CommonModels.InsulationMaterialDynamicOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Batt")
                        .HasColumnType("text");

                    b.Property<Guid?>("InsulationId")
                        .HasColumnType("uuid");

                    b.Property<string>("LooseFill")
                        .HasColumnType("text");

                    b.Property<string>("Rigit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InsulationId")
                        .IsUnique();

                    b.ToTable("InsulationMaterialDynamicOptions");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.CommonModels.PerimeterInsulation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AssemblyEffectiveRValue")
                        .HasColumnType("double precision");

                    b.Property<double>("NominalRValue")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("SlabId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SlabId");

                    b.ToTable("PerimeterInsulations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.Foundation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<string>("FoundationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FoundationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ZoneFloorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ZoneFloorId");

                    b.ToTable("Foundations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.FoundationTypeDynamicOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Conditioned")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Finished")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FoundationId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Vented")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FoundationId")
                        .IsUnique();

                    b.ToTable("FoundationTypeDynamicOptions");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.FoundationWall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FoundationId")
                        .HasColumnType("uuid");

                    b.Property<string>("FoundationWallName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FoundationId");

                    b.ToTable("FoundationWalls");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.FrameFloor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("AtticId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FoundationId")
                        .HasColumnType("uuid");

                    b.Property<string>("FrameFloorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AtticId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FoundationId");

                    b.ToTable("FrameFloors");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.Slab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<double>("ExposedPerimeter")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("FoundationId")
                        .HasColumnType("uuid");

                    b.Property<string>("SlabName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FoundationId");

                    b.ToTable("Slabs");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.ZoneFloor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ZoneFloors");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Attic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AtticName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AtticType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ZoneRoofId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ZoneRoofId");

                    b.ToTable("Attics");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.AtticTypeDynamicOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AtticId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("CapeCod")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Conditioned")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Vented")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AtticId")
                        .IsUnique();

                    b.ToTable("AtticTypeDynamicOptions");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Roof", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<Guid>("AtticId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RadiantBarrier")
                        .HasColumnType("boolean");

                    b.Property<string>("RoofColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoofName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoofType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SolarAbsorptance")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AtticId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Roofs");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Skylight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RoofId")
                        .HasColumnType("uuid");

                    b.Property<double>("SHGC")
                        .HasColumnType("double precision");

                    b.Property<double>("UFactor")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("RoofId");

                    b.ToTable("Skylights");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Wall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("AtticId")
                        .HasColumnType("uuid");

                    b.Property<string>("AtticWallType")
                        .HasColumnType("text");

                    b.Property<int?>("Azimuth")
                        .HasColumnType("integer");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExteriorAdjacentTo")
                        .HasColumnType("text");

                    b.Property<Guid?>("InsulationsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Orientation")
                        .HasColumnType("text");

                    b.Property<string>("Siding")
                        .HasColumnType("text");

                    b.Property<string>("WallName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WallType")
                        .HasColumnType("text");

                    b.Property<Guid?>("ZoneWallId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AtticId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("InsulationsId");

                    b.HasIndex("ZoneWallId");

                    b.ToTable("Walls");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.ZoneRoof", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ZoneRoofs");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneWallModels.FrameTypeDynamicOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("ThermalBreak")
                        .HasColumnType("boolean");

                    b.Property<Guid>("WindowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WindowId")
                        .IsUnique();

                    b.ToTable("FrameTypeDynamicOptions");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneWallModels.WallTypeDynamicOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("ExpandedPolystyreneSheathing")
                        .HasColumnType("boolean");

                    b.Property<string>("FramingType")
                        .HasColumnType("text");

                    b.Property<bool?>("OptimumValueEngineering")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Staggered")
                        .HasColumnType("boolean");

                    b.Property<Guid>("WallId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WallId")
                        .IsUnique();

                    b.ToTable("WallsTypeDynamicOptions");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneWallModels.Window", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<int>("Azimuth")
                        .HasColumnType("integer");

                    b.Property<string>("FrameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GasFill")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GlassLayers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GlassType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SHGC")
                        .HasColumnType("double precision");

                    b.Property<double>("UFactor")
                        .HasColumnType("double precision");

                    b.Property<Guid>("WallId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WallId")
                        .IsUnique();

                    b.ToTable("Windows");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneWallModels.ZoneWall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ZoneWalls");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.AboutModels.AirInfiltrationMeasurement", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.AboutModels.About", "About")
                        .WithMany("AirInfiltrationMeasurements")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.AddressModels.Building", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.AboutModels.About", "Abouts")
                        .WithMany()
                        .HasForeignKey("AboutId");

                    b.HasOne("EnergyScore.Domain.Entityies.AddressModels.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneFloorModels.ZoneFloor", "ZoneFloors")
                        .WithMany()
                        .HasForeignKey("ZoneFloorId");

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneRoofModels.ZoneRoof", "ZoneRoofs")
                        .WithMany()
                        .HasForeignKey("ZoneRoofId");

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneWallModels.ZoneWall", "ZoneWall")
                        .WithMany()
                        .HasForeignKey("ZoneWallId");

                    b.Navigation("Abouts");

                    b.Navigation("Address");

                    b.Navigation("ZoneFloors");

                    b.Navigation("ZoneRoofs");

                    b.Navigation("ZoneWall");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.CommonModels.Insulation", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneFloorModels.FoundationWall", null)
                        .WithMany("Insulations")
                        .HasForeignKey("FoundationWallId");

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneFloorModels.FrameFloor", null)
                        .WithMany("Insulations")
                        .HasForeignKey("FrameFloorId");

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneRoofModels.Roof", null)
                        .WithMany("Insulations")
                        .HasForeignKey("RoofId");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.CommonModels.InsulationMaterialDynamicOptions", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.CommonModels.Insulation", "Insulation")
                        .WithOne("InsulationMaterialDynamicOptions")
                        .HasForeignKey("EnergyScore.Domain.Entityies.CommonModels.InsulationMaterialDynamicOptions", "InsulationId");

                    b.Navigation("Insulation");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.CommonModels.PerimeterInsulation", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneFloorModels.Slab", null)
                        .WithMany("PerimeterInsulations")
                        .HasForeignKey("SlabId");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.Foundation", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.AddressModels.Building", "Building")
                        .WithMany("Foundation")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneFloorModels.ZoneFloor", "ZoneFloor")
                        .WithMany("Foundations")
                        .HasForeignKey("ZoneFloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("ZoneFloor");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.FoundationTypeDynamicOption", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneFloorModels.Foundation", "Foundations")
                        .WithOne("FoundationTypeDynamicOptions")
                        .HasForeignKey("EnergyScore.Domain.Entityies.ZoneFloorModels.FoundationTypeDynamicOption", "FoundationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Foundations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.FoundationWall", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.AddressModels.Building", "Building")
                        .WithMany("FoundationWall")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneFloorModels.Foundation", "Foundations")
                        .WithMany("FoundationWalls")
                        .HasForeignKey("FoundationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Foundations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.FrameFloor", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneRoofModels.Attic", "Attic")
                        .WithMany("FrameFloors")
                        .HasForeignKey("AtticId");

                    b.HasOne("EnergyScore.Domain.Entityies.AddressModels.Building", "Building")
                        .WithMany("FrameFloor")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneFloorModels.Foundation", "Foundations")
                        .WithMany("FrameFloors")
                        .HasForeignKey("FoundationId");

                    b.Navigation("Attic");

                    b.Navigation("Building");

                    b.Navigation("Foundations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.Slab", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.AddressModels.Building", "Building")
                        .WithMany("Slab")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneFloorModels.Foundation", "Foundations")
                        .WithMany("Slabs")
                        .HasForeignKey("FoundationId");

                    b.Navigation("Building");

                    b.Navigation("Foundations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Attic", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.AddressModels.Building", "Building")
                        .WithMany("Attic")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneRoofModels.ZoneRoof", "ZoneRoof")
                        .WithMany("Attics")
                        .HasForeignKey("ZoneRoofId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("ZoneRoof");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.AtticTypeDynamicOption", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneRoofModels.Attic", "Attics")
                        .WithOne("AtticTypeDynamicOptions")
                        .HasForeignKey("EnergyScore.Domain.Entityies.ZoneRoofModels.AtticTypeDynamicOption", "AtticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attics");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Roof", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneRoofModels.Attic", "Attics")
                        .WithMany("Roofs")
                        .HasForeignKey("AtticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyScore.Domain.Entityies.AddressModels.Building", "Building")
                        .WithMany("Roof")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attics");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Skylight", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneRoofModels.Roof", "Roof")
                        .WithMany("Skylights")
                        .HasForeignKey("RoofId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roof");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Wall", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneRoofModels.Attic", "Attics")
                        .WithMany("Walls")
                        .HasForeignKey("AtticId");

                    b.HasOne("EnergyScore.Domain.Entityies.AddressModels.Building", "Building")
                        .WithMany("Wall")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyScore.Domain.Entityies.CommonModels.Insulation", "Insulations")
                        .WithMany()
                        .HasForeignKey("InsulationsId");

                    b.HasOne("EnergyScore.Domain.Entityies.ZoneWallModels.ZoneWall", null)
                        .WithMany("Walls")
                        .HasForeignKey("ZoneWallId");

                    b.Navigation("Attics");

                    b.Navigation("Building");

                    b.Navigation("Insulations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneWallModels.FrameTypeDynamicOptions", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneWallModels.Window", "Window")
                        .WithOne("FrameTypeDynamicOptions")
                        .HasForeignKey("EnergyScore.Domain.Entityies.ZoneWallModels.FrameTypeDynamicOptions", "WindowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Window");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneWallModels.WallTypeDynamicOptions", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneRoofModels.Wall", "Wall")
                        .WithOne("WallTypeDynamicOptions")
                        .HasForeignKey("EnergyScore.Domain.Entityies.ZoneWallModels.WallTypeDynamicOptions", "WallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wall");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneWallModels.Window", b =>
                {
                    b.HasOne("EnergyScore.Domain.Entityies.ZoneRoofModels.Wall", "Wall")
                        .WithOne("Window")
                        .HasForeignKey("EnergyScore.Domain.Entityies.ZoneWallModels.Window", "WallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wall");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.AboutModels.About", b =>
                {
                    b.Navigation("AirInfiltrationMeasurements");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.AddressModels.Building", b =>
                {
                    b.Navigation("Attic");

                    b.Navigation("Foundation");

                    b.Navigation("FoundationWall");

                    b.Navigation("FrameFloor");

                    b.Navigation("Roof");

                    b.Navigation("Slab");

                    b.Navigation("Wall");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.CommonModels.Insulation", b =>
                {
                    b.Navigation("InsulationMaterialDynamicOptions");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.Foundation", b =>
                {
                    b.Navigation("FoundationTypeDynamicOptions")
                        .IsRequired();

                    b.Navigation("FoundationWalls");

                    b.Navigation("FrameFloors");

                    b.Navigation("Slabs");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.FoundationWall", b =>
                {
                    b.Navigation("Insulations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.FrameFloor", b =>
                {
                    b.Navigation("Insulations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.Slab", b =>
                {
                    b.Navigation("PerimeterInsulations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneFloorModels.ZoneFloor", b =>
                {
                    b.Navigation("Foundations");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Attic", b =>
                {
                    b.Navigation("AtticTypeDynamicOptions")
                        .IsRequired();

                    b.Navigation("FrameFloors");

                    b.Navigation("Roofs");

                    b.Navigation("Walls");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Roof", b =>
                {
                    b.Navigation("Insulations");

                    b.Navigation("Skylights");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.Wall", b =>
                {
                    b.Navigation("WallTypeDynamicOptions");

                    b.Navigation("Window");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneRoofModels.ZoneRoof", b =>
                {
                    b.Navigation("Attics");
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneWallModels.Window", b =>
                {
                    b.Navigation("FrameTypeDynamicOptions")
                        .IsRequired();
                });

            modelBuilder.Entity("EnergyScore.Domain.Entityies.ZoneWallModels.ZoneWall", b =>
                {
                    b.Navigation("Walls");
                });
#pragma warning restore 612, 618
        }
    }
}
